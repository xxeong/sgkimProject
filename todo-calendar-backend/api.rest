### 할 일 목록 조회
### 디폴트 값이 asc 값 변경은 뒤에 *?order=desc* 추가하면됨.
GET http://localhost:8080/api/todo
content-type: application/json

# 응답 예시 :
# {
#     "id": 1,
#     "title": "test",
#     "dueDate": null, (마감일이 존재한다면 "2025-03-08" 이런 형태.)
#     "status": "N",
#     "createDateTime": "2025-03-07T19:56:38",
#     "updateDateTime": "2025-03-07T19:56:38"
#   }

### 할 일 ID 조회
GET http://localhost:8080/api/todo/1

# 응답 예시 :
# {
#     "id": 1,
#     "title": "test",
#     "dueDate": null, (마감일이 존재한다면 "2025-03-08" 이런 형태.)
#     "status": "N",
#     "createDateTime": "2025-03-07T19:56:38",
#     "updateDateTime": "2025-03-07T19:56:38"
#   }

### 할 일 생성
POST http://localhost:8080/api/todo
content-type: application/json

{
    "title": "test~",
    "dueDate":"2025-03-11",
    "status": "N"
}

# 응답 예시 :
# {
#     "id": 1,
#     "title": "test",
#     "dueDate": "2025-03-11", (마감일이 존재한다면 "2025-03-08" 이런 형태.)
#     "status": "N",
#     "createDateTime": "2025-03-07T19:56:38",
#     "updateDateTime": "2025-03-07T19:56:38"
#   }

### 할 일 수정
PUT http://localhost:8080/api/todo/7
content-type: application/json

{
    "title": "PUT_TEST입니다~",
    "dueDate":"2025-03-21"
}

# 응답 예시 :
# {
#     "id": 1,
#     "title": "test",
#     "dueDate": "2025-03-11", (마감일이 존재한다면 "2025-03-08" 이런 형태.)
#     "status": "N",
#     "createDateTime": "2025-03-07T19:56:38",
#     "updateDateTime": "2025-03-07T19:56:38"
#   }

### 할 일 상태 수정
PATCH http://localhost:8080/api/todo/7
content-type: application/json

{
    "status": "N"
}

# 응답 예시 :
# {
#     "id": 1,
#     "title": "test",
#     "dueDate": "2025-03-11", (마감일이 존재한다면 "2025-03-08" 이런 형태.)
#     "status": "N",
#     "createDateTime": "2025-03-07T19:56:38",
#     "updateDateTime": "2025-03-07T19:56:38"
#   }

### 할 일 삭제
DELETE http://localhost:8080/api/todo/6

### 일정 조회
GET http://localhost:8080/api/event
content-type: application/json

# 응답 예시 :
# {
#   "id": 1,
#   "title": "Test입니다~",
#   "description": "Test 일정 입니다.",
#   "startDateTime": "2025-03-10T14:00:00",
#   "endDateTime": "2025-03-10T14:00:00",
#   "location": "회의실B",
#   "createDateTime": "2025-03-05T16:48:58",
#   "updateDateTime": "2025-03-08T23:46:04"
# }

### 일정 ID 조회
GET http://localhost:8080/api/event/1

# 응답 예시 :
# {
#   "id": 1,
#   "title": "Test입니다~",
#   "description": "Test 일정 입니다.",
#   "startDateTime": "2025-03-10T14:00:00",
#   "endDateTime": "2025-03-10T14:00:00",
#   "location": "회의실B",
#   "createDateTime": "2025-03-05T16:48:58",
#   "updateDateTime": "2025-03-08T23:46:04"
# }

### 일정 생성
POST http://localhost:8080/api/event
content-type: application/json

{
    "title": "Test입니다~",
    "description": "Test 일정 입니다.",
    "startDateTime":"2025-03-10T14:00:00",
    "endDateTime":"2025-03-10T14:00:00",
    "location":"회의실B"
}

# 응답 예시 :
# {
#   "id": 1,
#   "title": "Test입니다~",
#   "description": "Test 일정 입니다.",
#   "startDateTime": "2025-03-10T14:00:00",
#   "endDateTime": "2025-03-10T14:00:00",
#   "location": "회의실B",
#   "createDateTime": "2025-03-05T16:48:58",
#   "updateDateTime": "2025-03-08T23:46:04"
# }

### 일정 수정
PUT http://localhost:8080/api/event/1
content-type: application/json

{
    "title": "Test입니다~",
    "description": "Test 일정 입니다.",
    "startDateTime":"2025-03-10T14:00:00",
    "endDateTime":"2025-03-10T14:00:00",
    "location":"회의실B"
}

# 응답 예시 :
# {
#   "id": 1,
#   "title": "Test입니다~",
#   "description": "Test 일정 입니다.",
#   "startDateTime": "2025-03-10T14:00:00",
#   "endDateTime": "2025-03-10T14:00:00",
#   "location": "회의실B",
#   "createDateTime": "2025-03-05T16:48:58",
#   "updateDateTime": "2025-03-08T23:46:04"
# }

### 일정 PATCH 수정
PATCH http://localhost:8080/api/event/1
content-type: application/json

{
    "title": "Test입니다~",
    "description": "Test 일정 입니다.",
    "startDateTime":"2025-03-10T14:00:00",
    "endDateTime":"2025-03-10T14:00:00",
    "location":"회의실B"
}

# 응답 예시 :
# {
#   "id": 1,
#   "title": "Test입니다~",
#   "description": "Test 일정 입니다.",
#   "startDateTime": "2025-03-10T14:00:00",
#   "endDateTime": "2025-03-10T14:00:00",
#   "location": "회의실B",
#   "createDateTime": "2025-03-05T16:48:58",
#   "updateDateTime": "2025-03-08T23:46:04"
# }

###
DELETE http://localhost:8080/api/event/3

# 응답 예시 : 
# HTTP/1.1 204 
# Vary: Origin, Access-Control-Request-Method, Access-Control-Request-Headers
# Date: Sat, 08 Mar 2025 14:48:29 GMT
# Connection: close

### 모든 설명 조회
GET http://localhost:8080/api/todo/descriptions

# 응답 예시 :
# {
#     "id": 1,
#     "todoId": 1,
#     "description": "React 프로젝트 기본 구조 설계"
# }

### 특정 todoId로 모든 설명 조회
GET http://localhost:8080/api/todo/descriptions/1

# 응답 예시 :
# {
#     "id": 1,
#     "todoId": 1,
#     "description": "React 프로젝트 기본 구조 설계"
# }

### 설명 추가(PathVariable로 todoId값 받음)
POST http://localhost:8080/api/todo/descriptions/1
Content-Type: application/json

{
    "description" : "test"
}

# 응답 예시 :
# {
#   "id": 10,
#   "todoId": 1,
#   "description": "test"
# }

### id로 설명 수정(PathVariable로 descriptionId값 받음)
PUT http://localhost:8080/api/todo/descriptions/11
content-type: application/json

{
    "description": "Test 설명 수정 입니다."
}

# 응답 예시 :
# {
#   "id": 10,
#   "todoId": 1,
#   "description": "Test 설명 수정 입니다."
# }

### 설명 삭제(PathVariable로 descriptionId값 받음)
DELETE  http://localhost:8080/api/todo/descriptions/11

# 응답 예시 :
# HTTP/1.1 204 
# Vary: Origin, Access-Control-Request-Method, Access-Control-Request-Headers
# Date: Sun, 09 Mar 2025 11:52:38 GMT
# Connection: close

### 메일보내기
POST http://localhost:8080/api/todo/share/mail
content-type: application/json

{
    "email": "qqq4118@naver.com",
    "todoIds": 
    [
    1,2
    ]

}
